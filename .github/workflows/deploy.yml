name: 智慧社区平台自动部署

on:
  push:
    branches: [ main ]
  workflow_dispatch:  # 允许手动触发

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: 设置Node.js环境
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      - name: 安装依赖
        run: npm ci
      - name: 运行代码检查
        run: npm run lint || true
      - name: 运行单元测试
        run: npm test || true

  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: 设置Node.js环境
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      - name: 安装依赖
        run: npm ci
      - name: 构建应用
        run: npm run build || true
      - name: 创建部署包
        run: tar -czf deploy.tar.gz * .env.* .gitignore
      - name: 上传构建产物
        uses: actions/upload-artifact@v3
        with:
          name: build-files
          path: deploy.tar.gz

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: success()
    steps:
      - name: 下载构建产物
        uses: actions/download-artifact@v3
        with:
          name: build-files
          path: ./
          
      - name: 安装sshpass
        run: sudo apt-get update && sudo apt-get install -y sshpass
        
      - name: 初始化服务器
        run: |
          # 创建临时脚本
          cat > server_setup.sh << 'EOF'
          #!/bin/bash
          set -e
          echo "开始初始化智慧社区平台服务器环境..."
          # 创建必要目录
          mkdir -p /var/www/community
          mkdir -p /var/www/community-backups
          mkdir -p /backups/db
          # 更新并安装必要软件
          apt-get update
          apt-get install -y nginx mysql-server redis-server nodejs npm curl
          npm install -g pm2
          # 配置Nginx
          cat > /etc/nginx/sites-available/community << 'EOFNGINX'
          server {
              listen 80;
              server_name _;
              location / {
                  proxy_pass http://localhost:3000;
                  proxy_http_version 1.1;
                  proxy_set_header Upgrade $http_upgrade;
                  proxy_set_header Connection 'upgrade';
                  proxy_set_header Host $host;
                  proxy_cache_bypass $http_upgrade;
              }
              location /assets {
                  alias /var/www/community/public/assets;
                  expires 1y;
                  add_header Cache-Control "public";
              }
          }
          EOFNGINX
          ln -sf /etc/nginx/sites-available/community /etc/nginx/sites-enabled/
          rm -f /etc/nginx/sites-enabled/default
          nginx -t && systemctl restart nginx
          echo "服务器初始化完成"
          EOF
          
          # 通过SSH远程执行脚本
          sshpass -p "${{ secrets.SERVER_PASSWORD }}" scp -o StrictHostKeyChecking=no server_setup.sh root@${{ secrets.SERVER_HOST }}:/root/
          sshpass -p "${{ secrets.SERVER_PASSWORD }}" ssh -o StrictHostKeyChecking=no root@${{ secrets.SERVER_HOST }} "bash /root/server_setup.sh"
        
      - name: 部署到服务器
        run: |
          # 部署应用
          sshpass -p "${{ secrets.SERVER_PASSWORD }}" scp -o StrictHostKeyChecking=no deploy.tar.gz root@${{ secrets.SERVER_HOST }}:/var/www/community/
          sshpass -p "${{ secrets.SERVER_PASSWORD }}" ssh -o StrictHostKeyChecking=no root@${{ secrets.SERVER_HOST }} "cd /var/www/community && tar -xzf deploy.tar.gz && npm ci --production && pm2 restart all || pm2 start npm --name 'community' -- start"
          
      - name: 部署后处理
        run: |
          sshpass -p "${{ secrets.SERVER_PASSWORD }}" ssh -o StrictHostKeyChecking=no root@${{ secrets.SERVER_HOST }} "echo 部署完成于 $(date) > /var/www/community/deploy-info.txt" 